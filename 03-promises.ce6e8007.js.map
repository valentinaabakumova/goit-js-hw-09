{"version":3,"sources":["js/03-promises.js"],"names":["form","document","querySelector","delay","step","amount","position","timer","onFormSubmit","e","preventDefault","console","log","value","createPromise","addEventListener","makePromise","Promise","resolve","setTimeout","promiseA","promiseB","Math","random","reject","all","then","catch","error"],"mappings":";AAAA,MAAMA,EAAOC,SAASC,cAAc,SAC9BC,EAAQF,SAASC,cAAc,gBAC/BE,EAAOH,SAASC,cAAc,eAC9BG,EAASJ,SAASC,cAAc,iBACtC,IAAII,EAAW,EACXC,EAAQ,OAIZ,SAASC,EAAaC,GACpBA,EAAEC,iBACFC,QAAQC,IAAI,OACZD,QAAQC,IAAIT,EAAMU,OAClBF,QAAQC,IAAIR,EAAKS,OACjBF,QAAQC,IAAIP,EAAOQ,OACnBF,QAAQC,IAAIN,GAEZQ,EAAcR,EAAUF,EAAKS,OAV/Bb,EAAKe,iBAAiB,SAAUP,GAchC,MAAMQ,EAAc,CAACV,EAAUH,IACtB,IAAIc,QAAQC,IACjBX,EAAQY,WAAW,IAAMD,EAAQZ,GAAWH,EAAMU,SAIhDO,EAAWJ,EAAY,iBAAkB,KACzCK,EAAWL,EAAY,iBAAkB,KAQ/C,SAASF,EAAcR,EAAUH,GACTmB,KAAKC,SAAW,IAGpChB,EAAQY,WAAW,IAAMD,QAAQZ,GAAWH,EAAMU,OAClDK,QAAQ,8CAGRM,OAAO,0CAGTlB,GAAY,EAjBdW,QAAQQ,IAAI,CAACL,EAAUC,IACpBK,KAAKb,GAASF,QAAQC,IAAIC,IAC1Bc,MAAMC,GAASjB,QAAQC,IAAIgB,IAkB9Bd,EAAc,EAAG,MACdY,KAAK,EAAGpB,SAAAA,EAAUH,MAAAA,MACjBQ,QAAQC,2BAA2BN,QAAeH,SAEnDwB,MAAM,EAAGrB,SAAAA,EAAUH,MAAAA,MAClBQ,QAAQC,0BAA0BN,QAAeH","file":"03-promises.ce6e8007.js","sourceRoot":"../src","sourcesContent":["const form = document.querySelector('.form');\nconst delay = document.querySelector('[name=delay]');\nconst step = document.querySelector('[name=step]');\nconst amount = document.querySelector('[name=amount]');\nlet position = 0;\nlet timer = 'null';\n\nform.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n  console.log('sub');\n  console.log(delay.value);\n  console.log(step.value);\n  console.log(amount.value);\n  console.log(position);\n\n  createPromise(position, step.value);\n}\n////////////////////////////////////////////\n\nconst makePromise = (position, delay) => {\n  return new Promise(resolve => {\n    timer = setTimeout(() => resolve(position), delay.value);\n  });\n};\n\nconst promiseA = makePromise('promiseA value', 1000);\nconst promiseB = makePromise('promiseB value', 3000);\n\nPromise.all([promiseA, promiseB])\n  .then(value => console.log(value)) //[\"promiseA value\", \"promiseB value\"]\n  .catch(error => console.log(error));\n\n////////////////////////////////////\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n    timer = setTimeout(() => resolve(position), delay.value);\n    resolve('Success! Value passed to resolve function');\n  } else {\n    // Reject\n    reject('Error! Error passed to reject function');\n  }\n\n  position += 1;\n}\n\ncreatePromise(2, 1500)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n"]}