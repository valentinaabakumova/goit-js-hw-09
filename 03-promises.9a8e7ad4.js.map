{"version":3,"sources":["js/03-promises.js"],"names":["form","document","querySelector","delay","step","amount","position","timer","onFormSubmit","e","preventDefault","setTimeout","i","value","s","createPromise","then","console","log","catch","shouldResolve","Math","random","promise","Promise","resolve","reject","addEventListener"],"mappings":";AAAA,MAAMA,EAAOC,SAASC,cAAc,SAC9BC,EAAQF,SAASC,cAAc,gBAC/BE,EAAOH,SAASC,cAAc,eAC9BG,EAASJ,SAASC,cAAc,iBACtC,IAAII,EAAW,EACXC,EAAQ,OAKZ,SAASC,EAAaC,GACpBA,EAAEC,iBAEiBC,WAAW,KACvB,IAAA,IAAIC,EAAI,EAAGA,EAAIP,EAAOQ,MAAOD,GAAK,EAAG,CAClCE,MAAAA,GAAKX,EAAMU,QAAST,EAAKS,MAAQD,EAEvCG,EADAT,EAAWM,EACaE,GACrBE,KAAK,EAAGV,SAAAA,EAAUH,MAAAA,MACjBc,QAAQC,2BAA2BZ,QAAeH,UAEnDgB,MAAM,EAAGb,SAAAA,EAAUH,MAAAA,MAClBc,QAAQC,0BAA0BZ,QAAeH,YAKtDA,EAAMU,OAGX,SAASE,EAAcT,EAAUH,GACzBiB,MAAAA,EAAgBC,KAAKC,SAAW,GAU/BC,OATS,IAAIC,QAAQ,CAACC,EAASC,KACpCf,WAAW,KACLS,EACFK,EAAQ,CAAEnB,SAAAA,EAAUH,MAAAA,IAEpBuB,EAAO,CAAEpB,SAAAA,EAAUH,MAAAA,KAEpBA,KAjCPH,EAAK2B,iBAAiB,SAAUnB","file":"03-promises.9a8e7ad4.js","sourceRoot":"../src","sourcesContent":["const form = document.querySelector('.form');\nconst delay = document.querySelector('[name=delay]');\nconst step = document.querySelector('[name=step]');\nconst amount = document.querySelector('[name=amount]');\nlet position = 0;\nlet timer = 'null';\nform.addEventListener('submit', onFormSubmit);\n// let s = Number(step.value);\n\n// let s2 = Number(step.value);\nfunction onFormSubmit(e) {\n  e.preventDefault();\n\n  const firsrTimer = setTimeout(() => {\n    for (let i = 0; i < amount.value; i += 1) {\n      const s = +delay.value + +step.value * i;\n      position = i;\n      createPromise(position, s)\n        .then(({ position, delay }) => {\n          console.log(`✅ Fulfilled promise ${position} in ${delay} ms`);\n        })\n        .catch(({ position, delay }) => {\n          console.log(`❌ Rejected promise ${position} in ${delay} ms`);\n        });\n      // Number(step.value);\n      // s += step.value;\n    }\n  }, delay.value);\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n  return promise;\n}\n"]}